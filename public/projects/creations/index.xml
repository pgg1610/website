<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Personal projects on Pushkar Ghanekar</title>
    <link>/projects/creations/</link>
    <description>Recent content in Personal projects on Pushkar Ghanekar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jan 2020 15:00:28 +0000</lastBuildDate>
    
	<atom:link href="/projects/creations/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bayesian optimization using Gaussian Processes</title>
      <link>/projects/creations/bo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/creations/bo/</guid>
      <description> Notebook explaining the idea behind bayesian optimization alongside a small example showing its use. This notebook was adapted from Martin Krasser&amp;rsquo;s blogpost Good introductory write-up on Bayesian optimization here Nice lecture explaining the working of Gaussian Processes here  </description>
    </item>
    
    <item>
      <title>End-to-end Machine Learning Project</title>
      <link>/projects/creations/end2end_ml_project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/creations/end2end_ml_project/</guid>
      <description>This project is obtained from Aurelien Geron&amp;rsquo;s Hands-on Machine Leanring with Scikit-learn and Tensorflow (github link). The aim to predict median house values in Californian districts, given a number of features from these districts.
Main steps we will go through:
 Formulate the problem Get the data Discover and visualize data / Data exploration to gain insight Prep data for ML algorithm testing Select model and train it Fine-tuning the model  </description>
    </item>
    
    <item>
      <title>High throughput perovskite screening</title>
      <link>/projects/creations/perovskites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/creations/perovskites/</guid>
      <description>High throughput screening of MaterialsProject dataset using pymatgen API for estimating perovskite bulk stability. For selected candidates, analyze their surface morphology using ab-initio thermodynamic analysis.</description>
    </item>
    
    <item>
      <title>PyTorch CNN example</title>
      <link>/projects/creations/pytorch_cnn_example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/creations/pytorch_cnn_example/</guid>
      <description>Convolutional neural network is used to train on the CIFAR-10 dataset using PyTorch.
What does it consists of? The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images.
The dataset is divided into five training batches and one test batch, each with 10000 images. The test batch contains exactly 1000 randomly-selected images from each class.</description>
    </item>
    
    <item>
      <title>Support Vector Machines example</title>
      <link>/projects/creations/svm_usecase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/creations/svm_usecase/</guid>
      <description>This tutorial is adapted from Jake VanderPlas&amp;rsquo;s example of SVM as given in his reference book: Python Data Science Handbook</description>
    </item>
    
    <item>
      <title>Web scraping IMDB Bollywood data</title>
      <link>/projects/creations/imdb_scrapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/creations/imdb_scrapping/</guid>
      <description>Key results: </description>
    </item>
    
    <item>
      <title>Web scraping S&amp;P 500 data</title>
      <link>/projects/creations/sp500/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/creations/sp500/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>